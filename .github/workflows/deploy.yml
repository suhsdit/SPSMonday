name: Build and Deploy SPSMonday Module

on:
  push:
    branches: [ main, master ]
    paths:
      - 'SPSMonday/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'SPSMonday/**'
  release:
    types: [published]

env:
  MODULE_NAME: SPSMonday

jobs:
  test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4    
    - name: Setup PowerShell
      shell: pwsh
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "OS: $($PSVersionTable.OS)"
    
    - name: Install required modules
      shell: pwsh
      run: |
        Install-Module -Name Pester -Force -SkipPublisherCheck
        Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck
    
    - name: Test module manifest
      shell: pwsh
      run: |
        Write-Host "Testing module manifest..." -ForegroundColor Yellow
        # Temporarily replace version placeholder for testing
        $manifestPath = ".\SPSMonday\SPSMonday.psd1"
        $manifestContent = Get-Content -Path $manifestPath -Raw
        $testContent = $manifestContent -replace '<ModuleVersion>', '1.0.0'
        $testContent | Set-Content -Path ".\SPSMonday\SPSMonday.test.psd1"
        
        $manifest = Test-ModuleManifest -Path ".\SPSMonday\SPSMonday.test.psd1" -ErrorAction Stop
        Write-Host "✓ Manifest is valid" -ForegroundColor Green
        Write-Host "  Module: $($manifest.Name)" -ForegroundColor Gray
        Write-Host "  Version: $($manifest.Version)" -ForegroundColor Gray
        Write-Host "  Functions: $($manifest.ExportedFunctions.Keys.Count)" -ForegroundColor Gray
          # Clean up test file
        Remove-Item ".\SPSMonday\SPSMonday.test.psd1" -Force
    
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Write-Host "Running PSScriptAnalyzer..." -ForegroundColor Yellow
        $results = Invoke-ScriptAnalyzer -Path ".\SPSMonday" -Recurse -Settings PSGallery
        
        # Separate errors from warnings
        $errors = $results | Where-Object { $_.Severity -eq 'Error' }
        $warnings = $results | Where-Object { $_.Severity -eq 'Warning' }
        
        if ($warnings) {
          Write-Host "PSScriptAnalyzer found warnings:" -ForegroundColor Yellow
          $warnings | Format-Table -AutoSize
          Write-Host "Warnings are acceptable and will not fail the build." -ForegroundColor Yellow
        }
          if ($errors) {
          Write-Host "PSScriptAnalyzer found errors:" -ForegroundColor Red
          $errors | Format-Table -AutoSize
          Write-Host "Errors must be fixed before proceeding." -ForegroundColor Red          exit 1
        } else {
          Write-Host "✓ PSScriptAnalyzer passed (no errors found)" -ForegroundColor Green
        }

  build:
    needs: test
    runs-on: windows-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Determine version
      id: version
      shell: pwsh
      run: |
        if ($env:GITHUB_EVENT_NAME -eq 'release') {
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          echo "BUILD_VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "buildVer=$version" >> $env:GITHUB_ENV
          Write-Host "Build Version: $version" -ForegroundColor Green
        } else {
          # Use auto-increment versioning (will be determined by deploy.ps1)
          Write-Host "Using auto-increment versioning (Patch bump)" -ForegroundColor Green
          echo "BUILD_VERSION=auto" >> $env:GITHUB_OUTPUT
          echo "buildVer=auto" >> $env:GITHUB_ENV
        }
    
    - name: Build module
      shell: pwsh
      run: |
        if ($env:buildVer -eq "auto") {
          Write-Host "Auto-increment versioning will be handled by deploy.ps1" -ForegroundColor Green
        } else {
          Write-Host "Building module with version: $env:buildVer" -ForegroundColor Green
          .\build.ps1 -BuildVersion $env:buildVer
        }
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SPSMonday-Module-${{ steps.version.outputs.BUILD_VERSION }}
        path: SPSMonday/
        retention-days: 30

  deploy:
    needs: [test, build]
    runs-on: windows-latest
    # TODO: Implement proper release tagging in the future
    # For now, deploy runs on every push to main/master for testing
    # Later: if: github.event_name == 'release'
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: SPSMonday-Module-*
        merge-multiple: true
        path: SPSMonday/
    
    - name: Determine version
      id: version
      shell: pwsh
      run: |
        # TODO: Update this when implementing proper release tagging
        # For now, use the same logic as build job
        if ($env:GITHUB_EVENT_NAME -eq 'release') {
          $version = $env:GITHUB_REF -replace 'refs/tags/v', ''
          echo "DEPLOY_VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "buildVer=$version" >> $env:GITHUB_ENV
        } else {
          # Use auto-increment versioning (will be determined by deploy.ps1)
          Write-Host "Using auto-increment versioning (Patch bump)" -ForegroundColor Green
          echo "DEPLOY_VERSION=auto" >> $env:GITHUB_OUTPUT
          echo "buildVer=auto" >> $env:GITHUB_ENV
        }
    
    - name: Build module for deployment
      shell: pwsh
      run: |
        if ($env:buildVer -eq "auto") {
          Write-Host "Auto-increment versioning will be handled by deploy.ps1" -ForegroundColor Green
        } else {
          Write-Host "Building module for deployment with version: $env:buildVer" -ForegroundColor Green
          .\build.ps1 -BuildVersion $env:buildVer
        }
    
    - name: Deploy to PowerShell Gallery
      shell: pwsh
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: |
        if ([string]::IsNullOrWhiteSpace($env:NUGET_API_KEY)) {
          Write-Error "NUGET_API_KEY secret is not set"
          exit 1
        }
        
        Write-Host "Deploying to PowerShell Gallery..." -ForegroundColor Green
        if ($env:buildVer -eq "auto") {
          # Use auto-increment (patch bump by default)
          .\deploy.ps1 -NuGetApiKey $env:NUGET_API_KEY -VersionBump Patch
        } else {
          # Use specific version (for releases)
          .\deploy.ps1 -NuGetApiKey $env:NUGET_API_KEY -BuildVersion $env:buildVer
        }
    
    - name: Create deployment summary
      shell: pwsh
      run: |
        $moduleName = "SPSMonday"
        
        # Get the actual deployed version from the manifest
        $manifest = Test-ModuleManifest -Path ".\SPSMonday\SPSMonday.psd1"
        $version = $manifest.Version.ToString()
        
        "Deployment Summary" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "Module: $moduleName" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "Version: $version" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "Repository: PowerShell Gallery" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "Status: ✅ Deployed Successfully" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "Install Command: \`Install-Module -Name $moduleName\`" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
        "**Gallery Link: [View on PowerShell Gallery](https://www.powershellgallery.com/packages/$moduleName/$version)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append
